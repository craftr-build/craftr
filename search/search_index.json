{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"craftr-core The craftr-core package provides the core build system functions for the Craftr build system. Concepts Projects A project is the main unit that is used to represent a collection of tasks. A project has a collection of tasks and possibly other sub-projects. Every project has a name and unique ID (aka. path) inside the current build context. Tasks Tasks encapsulate the configuration and logic of an operation in a build. Examples include the compilation or generation of source files, copying or compressing files. Such operations are usually described using a sequence of Actions, see below. Dependencies between individual tasks describe a directed acyclic graph used for determining the order in which tasks need to be executed. A task has a set of input and output files. If an input files changes or an output file does not exist, a task is considered outdated and will be executed again. There are also tasks that are not executed by default unless depended on by another tasks that is executed or explicitly specified as to be executed in a given execution of the build graph. Actions An action is a concrete unit of work that can be executed as part of a build. A task is usually described by one or more actions. Dependencies between actions express the order in which they are to be executed relative to the other actions produced by the same task. Plugins Plugins are reusable pieces of build logic that can be applied to projects. A plugin usually registers a new task or task factory in the project which is subsequently accessible via the project.ext object or from the namespace object returned by Project.apply() . Settings Craftr settings are files in a line-based key=value format. There are a bunch of settings that control the behaviour of the Craftr core components. No settings file is loaded implicitly by the Context class. Option Default value core.build_directory .build core.executor craftr.core.executor.default.DefaultExecutor core.plugin.loader craftr.core.plugin.default.DefaultPluginLoader core.plugin.loader.delegates craftr.core.project.loader.default.DefaultProjectLoader,craftr.build.loader.DslProjectLoader? core.plugin.entrypoint craftr.plugins core.project.loader craftr.core.project.loader.delegate.DelegateProjectLoader core.verbose False core.task_selector craftr.core.task.selector.default.DefaultTaskSelector Copyright \u00a9 2021 Niklas Rosenstein","title":"Home"},{"location":"#craftr-core","text":"The craftr-core package provides the core build system functions for the Craftr build system.","title":"craftr-core"},{"location":"#concepts","text":"","title":"Concepts"},{"location":"#projects","text":"A project is the main unit that is used to represent a collection of tasks. A project has a collection of tasks and possibly other sub-projects. Every project has a name and unique ID (aka. path) inside the current build context.","title":"Projects"},{"location":"#tasks","text":"Tasks encapsulate the configuration and logic of an operation in a build. Examples include the compilation or generation of source files, copying or compressing files. Such operations are usually described using a sequence of Actions, see below. Dependencies between individual tasks describe a directed acyclic graph used for determining the order in which tasks need to be executed. A task has a set of input and output files. If an input files changes or an output file does not exist, a task is considered outdated and will be executed again. There are also tasks that are not executed by default unless depended on by another tasks that is executed or explicitly specified as to be executed in a given execution of the build graph.","title":"Tasks"},{"location":"#actions","text":"An action is a concrete unit of work that can be executed as part of a build. A task is usually described by one or more actions. Dependencies between actions express the order in which they are to be executed relative to the other actions produced by the same task.","title":"Actions"},{"location":"#plugins","text":"Plugins are reusable pieces of build logic that can be applied to projects. A plugin usually registers a new task or task factory in the project which is subsequently accessible via the project.ext object or from the namespace object returned by Project.apply() .","title":"Plugins"},{"location":"#settings","text":"Craftr settings are files in a line-based key=value format. There are a bunch of settings that control the behaviour of the Craftr core components. No settings file is loaded implicitly by the Context class. Option Default value core.build_directory .build core.executor craftr.core.executor.default.DefaultExecutor core.plugin.loader craftr.core.plugin.default.DefaultPluginLoader core.plugin.loader.delegates craftr.core.project.loader.default.DefaultProjectLoader,craftr.build.loader.DslProjectLoader? core.plugin.entrypoint craftr.plugins core.project.loader craftr.core.project.loader.delegate.DelegateProjectLoader core.verbose False core.task_selector craftr.core.task.selector.default.DefaultTaskSelector Copyright \u00a9 2021 Niklas Rosenstein","title":"Settings"},{"location":"api-documentation/craftr.core.actions/","text":"craftr.core.actions craftr.core.actions.lambda_action craftr.core.actions.command_action CommandAction Objects @dataclass class CommandAction(Action) command A command line to execute. commands A list of command lines to execute in order. If both command and commands are specified, command is executed first. working_directory The working directory in which to execute the command(s). verbose If this is enabled, the command that is being run is printed to stdout. craftr.core.actions.create_directory_action CreateDirectoryAction Objects @dataclass class CreateDirectoryAction(Action) path The path of the directory to create. craftr.core.actions.action Action Objects class Action(, metaclass=abc.ABCMeta) as_task | @classmethod | as_task(cls, project: 'Project', name: str) -> 'Task' Factory function to produce a task that contains exactly the properties of this action through the class annotations. The action will be created by passing a keyword argument for every populated property value. craftr.core.actions.write_file_action WriteFileAction Objects @dataclass class WriteFileAction(Action) file_path The path of the file to write to. text The contents of the file as text. encoding The encoding if text is provided. data The contents of the file to write as binary data.","title":"craftr.core.actions"},{"location":"api-documentation/craftr.core.actions/#craftrcoreactions","text":"","title":"craftr.core.actions"},{"location":"api-documentation/craftr.core.actions/#craftrcoreactionslambda_action","text":"","title":"craftr.core.actions.lambda_action"},{"location":"api-documentation/craftr.core.actions/#craftrcoreactionscommand_action","text":"","title":"craftr.core.actions.command_action"},{"location":"api-documentation/craftr.core.actions/#commandaction-objects","text":"@dataclass class CommandAction(Action)","title":"CommandAction Objects"},{"location":"api-documentation/craftr.core.actions/#command","text":"A command line to execute.","title":"command"},{"location":"api-documentation/craftr.core.actions/#commands","text":"A list of command lines to execute in order. If both command and commands are specified, command is executed first.","title":"commands"},{"location":"api-documentation/craftr.core.actions/#working_directory","text":"The working directory in which to execute the command(s).","title":"working_directory"},{"location":"api-documentation/craftr.core.actions/#verbose","text":"If this is enabled, the command that is being run is printed to stdout.","title":"verbose"},{"location":"api-documentation/craftr.core.actions/#craftrcoreactionscreate_directory_action","text":"","title":"craftr.core.actions.create_directory_action"},{"location":"api-documentation/craftr.core.actions/#createdirectoryaction-objects","text":"@dataclass class CreateDirectoryAction(Action)","title":"CreateDirectoryAction Objects"},{"location":"api-documentation/craftr.core.actions/#path","text":"The path of the directory to create.","title":"path"},{"location":"api-documentation/craftr.core.actions/#craftrcoreactionsaction","text":"","title":"craftr.core.actions.action"},{"location":"api-documentation/craftr.core.actions/#action-objects","text":"class Action(, metaclass=abc.ABCMeta)","title":"Action Objects"},{"location":"api-documentation/craftr.core.actions/#as_task","text":"| @classmethod | as_task(cls, project: 'Project', name: str) -> 'Task' Factory function to produce a task that contains exactly the properties of this action through the class annotations. The action will be created by passing a keyword argument for every populated property value.","title":"as_task"},{"location":"api-documentation/craftr.core.actions/#craftrcoreactionswrite_file_action","text":"","title":"craftr.core.actions.write_file_action"},{"location":"api-documentation/craftr.core.actions/#writefileaction-objects","text":"@dataclass class WriteFileAction(Action)","title":"WriteFileAction Objects"},{"location":"api-documentation/craftr.core.actions/#file_path","text":"The path of the file to write to.","title":"file_path"},{"location":"api-documentation/craftr.core.actions/#text","text":"The contents of the file as text.","title":"text"},{"location":"api-documentation/craftr.core.actions/#encoding","text":"The encoding if text is provided.","title":"encoding"},{"location":"api-documentation/craftr.core.actions/#data","text":"The contents of the file to write as binary data.","title":"data"},{"location":"api-documentation/craftr.core.configurable/","text":"craftr.core.configurable Configurable Objects class Configurable(t.Protocol[T_co, U_co]) Abstract base class for objects configurable through closures. Basically they are","title":"craftr.core.configurable"},{"location":"api-documentation/craftr.core.configurable/#craftrcoreconfigurable","text":"","title":"craftr.core.configurable"},{"location":"api-documentation/craftr.core.configurable/#configurable-objects","text":"class Configurable(t.Protocol[T_co, U_co]) Abstract base class for objects configurable through closures. Basically they are","title":"Configurable Objects"},{"location":"api-documentation/craftr.core.context/","text":"craftr.core.context Context Objects class Context() The context carries globally accessible data for a craftr build. If not settings are specified, the craftr.properties file is read from the current working directory (if it exists). Supported Settings core.build_directory (no default) core.executor (defaults to craftr.core.executor.simple.SimpleExecutor ) core.task_selector (defaults to craftr.core.task.selector.default.DefaultTaskSelector ) load_project | load_project(path: Path) -> Project Initialize the root project and return it. initialize_project | initialize_project(project: Project) -> None Called when a project is created. Can be overwritten by subclasses to customize what happens when a project is created. The default implementationa applies the \"default\" plugin. get_default_build_directory | get_default_build_directory(project: Project) -> Path Returns the default build directory for a project, used if no explicit build directory is set. The default implementation returns the .build/ directory in the project's directory, unless core.build_directory is set.","title":"craftr.core.context"},{"location":"api-documentation/craftr.core.context/#craftrcorecontext","text":"","title":"craftr.core.context"},{"location":"api-documentation/craftr.core.context/#context-objects","text":"class Context() The context carries globally accessible data for a craftr build. If not settings are specified, the craftr.properties file is read from the current working directory (if it exists). Supported Settings core.build_directory (no default) core.executor (defaults to craftr.core.executor.simple.SimpleExecutor ) core.task_selector (defaults to craftr.core.task.selector.default.DefaultTaskSelector )","title":"Context Objects"},{"location":"api-documentation/craftr.core.context/#load_project","text":"| load_project(path: Path) -> Project Initialize the root project and return it.","title":"load_project"},{"location":"api-documentation/craftr.core.context/#initialize_project","text":"| initialize_project(project: Project) -> None Called when a project is created. Can be overwritten by subclasses to customize what happens when a project is created. The default implementationa applies the \"default\" plugin.","title":"initialize_project"},{"location":"api-documentation/craftr.core.context/#get_default_build_directory","text":"| get_default_build_directory(project: Project) -> Path Returns the default build directory for a project, used if no explicit build directory is set. The default implementation returns the .build/ directory in the project's directory, unless core.build_directory is set.","title":"get_default_build_directory"},{"location":"api-documentation/craftr.core.error/","text":"craftr.core.error","title":"craftr.core.error"},{"location":"api-documentation/craftr.core.error/#craftrcoreerror","text":"","title":"craftr.core.error"},{"location":"api-documentation/craftr.core.executor/","text":"craftr.core.executor craftr.core.executor.default A very simple, sequential executor. craftr.core.executor.graph ExecutionGraph Objects class ExecutionGraph() The execution graph contains a plan for the order in which tasks need to be executed. It is accessible via the Context.graph property, but it will be empty until all projects have been evaluated and Context.execute() is called. The execution graph contains only those tasks that are selected for execution. Some tasks may not be included by default (if Task.default is set to False ) or are skipped because they have not been explicitly selected. when_ready | when_ready(closure: t.Callable[['ExecutionGraph'], None]) -> None Adds a callback that is invoked when the execution graph is ready. If the graph is ready by the time this method is called, the closure is invoked immediately. ready | ready() -> None Declare that the execution graph is ready. Invokes registered listeners. add_task | add_task(task: Task) -> None Add a task and all it's dependencies to the graph. has_task | has_task(task: t.Union[str, Task]) -> bool Returns True if the specified task (either the absolute path of the task or the Task instance itself) is contained in the execution graph. get_ordered_tasks | get_ordered_tasks() -> t.List[Task] Retrieve the tasks of the execution graph in the order that they need to be executed. craftr.core.executor.api","title":"craftr.core.executor"},{"location":"api-documentation/craftr.core.executor/#craftrcoreexecutor","text":"","title":"craftr.core.executor"},{"location":"api-documentation/craftr.core.executor/#craftrcoreexecutordefault","text":"A very simple, sequential executor.","title":"craftr.core.executor.default"},{"location":"api-documentation/craftr.core.executor/#craftrcoreexecutorgraph","text":"","title":"craftr.core.executor.graph"},{"location":"api-documentation/craftr.core.executor/#executiongraph-objects","text":"class ExecutionGraph() The execution graph contains a plan for the order in which tasks need to be executed. It is accessible via the Context.graph property, but it will be empty until all projects have been evaluated and Context.execute() is called. The execution graph contains only those tasks that are selected for execution. Some tasks may not be included by default (if Task.default is set to False ) or are skipped because they have not been explicitly selected.","title":"ExecutionGraph Objects"},{"location":"api-documentation/craftr.core.executor/#when_ready","text":"| when_ready(closure: t.Callable[['ExecutionGraph'], None]) -> None Adds a callback that is invoked when the execution graph is ready. If the graph is ready by the time this method is called, the closure is invoked immediately.","title":"when_ready"},{"location":"api-documentation/craftr.core.executor/#ready","text":"| ready() -> None Declare that the execution graph is ready. Invokes registered listeners.","title":"ready"},{"location":"api-documentation/craftr.core.executor/#add_task","text":"| add_task(task: Task) -> None Add a task and all it's dependencies to the graph.","title":"add_task"},{"location":"api-documentation/craftr.core.executor/#has_task","text":"| has_task(task: t.Union[str, Task]) -> bool Returns True if the specified task (either the absolute path of the task or the Task instance itself) is contained in the execution graph.","title":"has_task"},{"location":"api-documentation/craftr.core.executor/#get_ordered_tasks","text":"| get_ordered_tasks() -> t.List[Task] Retrieve the tasks of the execution graph in the order that they need to be executed.","title":"get_ordered_tasks"},{"location":"api-documentation/craftr.core.executor/#craftrcoreexecutorapi","text":"","title":"craftr.core.executor.api"},{"location":"api-documentation/craftr.core.plugin/","text":"craftr.core.plugin craftr.core.plugin.default DefaultPluginLoader Objects @dataclass class DefaultPluginLoader(IPluginLoader) Default implementation for loading plugins via the craftr.plugins entrypoint. craftr.core.plugin.api IPlugin Objects @t.runtime_checkable class IPlugin(t.Protocol, metaclass=abc.ABCMeta) apply | @abc.abstractmethod | apply(project: 'Project', name: str) -> t.Any Apply the plugin to the given project. IPluginLoader Objects @t.runtime_checkable class IPluginLoader(t.Protocol, metaclass=abc.ABCMeta) load_plugin | @abc.abstractmethod | load_plugin(plugin_name: str) -> IPlugin Load the given plugin by name.","title":"craftr.core.plugin"},{"location":"api-documentation/craftr.core.plugin/#craftrcoreplugin","text":"","title":"craftr.core.plugin"},{"location":"api-documentation/craftr.core.plugin/#craftrcoreplugindefault","text":"","title":"craftr.core.plugin.default"},{"location":"api-documentation/craftr.core.plugin/#defaultpluginloader-objects","text":"@dataclass class DefaultPluginLoader(IPluginLoader) Default implementation for loading plugins via the craftr.plugins entrypoint.","title":"DefaultPluginLoader Objects"},{"location":"api-documentation/craftr.core.plugin/#craftrcorepluginapi","text":"","title":"craftr.core.plugin.api"},{"location":"api-documentation/craftr.core.plugin/#iplugin-objects","text":"@t.runtime_checkable class IPlugin(t.Protocol, metaclass=abc.ABCMeta)","title":"IPlugin Objects"},{"location":"api-documentation/craftr.core.plugin/#apply","text":"| @abc.abstractmethod | apply(project: 'Project', name: str) -> t.Any Apply the plugin to the given project.","title":"apply"},{"location":"api-documentation/craftr.core.plugin/#ipluginloader-objects","text":"@t.runtime_checkable class IPluginLoader(t.Protocol, metaclass=abc.ABCMeta)","title":"IPluginLoader Objects"},{"location":"api-documentation/craftr.core.plugin/#load_plugin","text":"| @abc.abstractmethod | load_plugin(plugin_name: str) -> IPlugin Load the given plugin by name.","title":"load_plugin"},{"location":"api-documentation/craftr.core.project/","text":"craftr.core.project craftr.core.project.loader craftr.core.project.loader.default Implements the default project loader which loads build.craftr.py files and executes them as a plain Python script providing the current Project in the global scope. craftr.core.project.loader.api craftr.core.project.loader.delegate DelegateProjectLoader Objects class DelegateProjectLoader(IProjectLoader, IHasFromSettings) Delegates the project loading process to a sequence of other loaders. Returns the first project loaded by any loader. If created from configuration, the craftr.plugin.loader.delegates option is respected, which must be a comma-separated list of fully qualified lodaer names. A loader name may be trailed by a question mark to ignore if the loader name cannot be resolved. craftr.core.project.project Project Objects class Project(ExtensibleObject) A project is a collection of tasks, usually populated through a build script, tied to a directory. Projects can have sub projects and there is usually only one root project in build. __init__ | __init__(context: 'Context', parent: t.Optional['Project'] = None, directory: t.Union[None, str, Path] = None) -> None Create a new project. If no directory is specified, it will default to the parent directory of the caller. If the given context does not have a root project defined yet, the project will be promoted to the root project. task | task(name: str, task_class: t.Optional[t.Type[T_Task]] = None) -> T_Task Create a new task of type task_class (defaulting to Task ) and add it to the project. The task name must be unique within the project. tasks | @property | tasks() -> 'TaskContainer' Returns the TaskContainer object for this project. subproject | subproject(directory: str) -> 'Project' Reference a subproject by a path relative to the project directory. If the project has not been loaded yet, it will be created and initialized. get_subproject_by_name | get_subproject_by_name(name: str) -> 'Project' Returns a sub project of this project by it's name. Raises a ValueError if no sub project with the specified name exists in the project. subprojects | @t.overload | subprojects() -> t.List['Project'] Returns a list of the project's loaded subprojects. subprojects | @t.overload | subprojects(closure: t.Callable[['Project'], None]) -> None Call closure for every subproject currently loaded in the project.. on_apply | on_apply(func: Closure) -> None Register a function to call when the project is applied using apply from_project: <project> . apply | apply(plugin_name: t.Optional[str] = None, from_project: t.Union[None, str, 'Project'] = None) -> t.Any Loads a plugin and applies it to the project. Plugins are loaded via Context.plugin_loader and applied to the project immediately after. The default implementation for loading plugins uses Python package entrypoints. glob | glob(pattern: str) -> t.List[Path] Apply the specified glob pattern relative to the project directory and return a list of the matched files.","title":"craftr.core.project"},{"location":"api-documentation/craftr.core.project/#craftrcoreproject","text":"","title":"craftr.core.project"},{"location":"api-documentation/craftr.core.project/#craftrcoreprojectloader","text":"","title":"craftr.core.project.loader"},{"location":"api-documentation/craftr.core.project/#craftrcoreprojectloaderdefault","text":"Implements the default project loader which loads build.craftr.py files and executes them as a plain Python script providing the current Project in the global scope.","title":"craftr.core.project.loader.default"},{"location":"api-documentation/craftr.core.project/#craftrcoreprojectloaderapi","text":"","title":"craftr.core.project.loader.api"},{"location":"api-documentation/craftr.core.project/#craftrcoreprojectloaderdelegate","text":"","title":"craftr.core.project.loader.delegate"},{"location":"api-documentation/craftr.core.project/#delegateprojectloader-objects","text":"class DelegateProjectLoader(IProjectLoader, IHasFromSettings) Delegates the project loading process to a sequence of other loaders. Returns the first project loaded by any loader. If created from configuration, the craftr.plugin.loader.delegates option is respected, which must be a comma-separated list of fully qualified lodaer names. A loader name may be trailed by a question mark to ignore if the loader name cannot be resolved.","title":"DelegateProjectLoader Objects"},{"location":"api-documentation/craftr.core.project/#craftrcoreprojectproject","text":"","title":"craftr.core.project.project"},{"location":"api-documentation/craftr.core.project/#project-objects","text":"class Project(ExtensibleObject) A project is a collection of tasks, usually populated through a build script, tied to a directory. Projects can have sub projects and there is usually only one root project in build.","title":"Project Objects"},{"location":"api-documentation/craftr.core.project/#__init__","text":"| __init__(context: 'Context', parent: t.Optional['Project'] = None, directory: t.Union[None, str, Path] = None) -> None Create a new project. If no directory is specified, it will default to the parent directory of the caller. If the given context does not have a root project defined yet, the project will be promoted to the root project.","title":"__init__"},{"location":"api-documentation/craftr.core.project/#task","text":"| task(name: str, task_class: t.Optional[t.Type[T_Task]] = None) -> T_Task Create a new task of type task_class (defaulting to Task ) and add it to the project. The task name must be unique within the project.","title":"task"},{"location":"api-documentation/craftr.core.project/#tasks","text":"| @property | tasks() -> 'TaskContainer' Returns the TaskContainer object for this project.","title":"tasks"},{"location":"api-documentation/craftr.core.project/#subproject","text":"| subproject(directory: str) -> 'Project' Reference a subproject by a path relative to the project directory. If the project has not been loaded yet, it will be created and initialized.","title":"subproject"},{"location":"api-documentation/craftr.core.project/#get_subproject_by_name","text":"| get_subproject_by_name(name: str) -> 'Project' Returns a sub project of this project by it's name. Raises a ValueError if no sub project with the specified name exists in the project.","title":"get_subproject_by_name"},{"location":"api-documentation/craftr.core.project/#subprojects","text":"| @t.overload | subprojects() -> t.List['Project'] Returns a list of the project's loaded subprojects.","title":"subprojects"},{"location":"api-documentation/craftr.core.project/#subprojects_1","text":"| @t.overload | subprojects(closure: t.Callable[['Project'], None]) -> None Call closure for every subproject currently loaded in the project..","title":"subprojects"},{"location":"api-documentation/craftr.core.project/#on_apply","text":"| on_apply(func: Closure) -> None Register a function to call when the project is applied using apply from_project: <project> .","title":"on_apply"},{"location":"api-documentation/craftr.core.project/#apply","text":"| apply(plugin_name: t.Optional[str] = None, from_project: t.Union[None, str, 'Project'] = None) -> t.Any Loads a plugin and applies it to the project. Plugins are loaded via Context.plugin_loader and applied to the project immediately after. The default implementation for loading plugins uses Python package entrypoints.","title":"apply"},{"location":"api-documentation/craftr.core.project/#glob","text":"| glob(pattern: str) -> t.List[Path] Apply the specified glob pattern relative to the project directory and return a list of the matched files.","title":"glob"},{"location":"api-documentation/craftr.core.property/","text":"craftr.core.property craftr.core.property.typechecking Runtime type checking for properties based on type hints. TypeCheckingContext Objects class TypeCheckingContext(BaseContext) type_error | type_error(current_value: t.Any, expected_type: t.Any) -> TypeCheckingError Constructs a TypeError with information from the context. check_type check_type(value: t.Any, context: TypeCheckingContext) -> None Checks if the type of value matches the specified type_hint . The check is performed recursively to exhaustively verify the value type. craftr.core.property.property on_property_set_value on_property_set_value(value_type: t.Any, value: t.Any) -> t.Any Called when Property.set() is called with not a real value. Allows to transform the value. Property Objects class Property(Provider[T]) Properties are mutable providers that sit as attributes on objects of the HavingProperties base class. The type hint of a property is passed into it's construct when the annotation is defined on the HavingProperties class level. Properties perform extensive runtime type checking when setting a bare value and after evaluating it. A property can be finalized in which case it's value is calculated and cached. Subsequent calls to get() will return the cached value and attempts to set the property value will result in a RuntimeError . finalize | finalize() -> None Finalize the property. If already finalized, nothing happens. HavingProperties Objects class HavingProperties() Base for classes that have properties declared as annotations at the class level. Setting property values will automatically wrap them in a Provider if the value is not already one. The constructor will take care of initializing the properties. collect_properties collect_properties(provider: t.Union[HavingProperties, Provider]) -> t.List[Property] Collects all Property objects that are encountered when visiting the specified provider or all properties of a HavingProperties instance. craftr.core.property.provider NoValueError Objects class NoValueError(Exception) Raised when a provider has no value. Provider Objects class Provider(t.Generic[T], metaclass=abc.ABCMeta) get | @abc.abstractmethod | get() -> T Get the value of the propery, or raise a NoValueError . or_else | or_else(default: U) -> t.Union[T, U] Get the value of the property, or return default . or_else_get | or_else_get(default_supplier: t.Callable[[], U]) -> t.Union[T, U] Get the value of the property, or return the value returned by default_supplier . or_none | or_none() -> t.Optional[T] Get the value of the property, or return None.","title":"craftr.core.property"},{"location":"api-documentation/craftr.core.property/#craftrcoreproperty","text":"","title":"craftr.core.property"},{"location":"api-documentation/craftr.core.property/#craftrcorepropertytypechecking","text":"Runtime type checking for properties based on type hints.","title":"craftr.core.property.typechecking"},{"location":"api-documentation/craftr.core.property/#typecheckingcontext-objects","text":"class TypeCheckingContext(BaseContext)","title":"TypeCheckingContext Objects"},{"location":"api-documentation/craftr.core.property/#type_error","text":"| type_error(current_value: t.Any, expected_type: t.Any) -> TypeCheckingError Constructs a TypeError with information from the context.","title":"type_error"},{"location":"api-documentation/craftr.core.property/#check_type","text":"check_type(value: t.Any, context: TypeCheckingContext) -> None Checks if the type of value matches the specified type_hint . The check is performed recursively to exhaustively verify the value type.","title":"check_type"},{"location":"api-documentation/craftr.core.property/#craftrcorepropertyproperty","text":"","title":"craftr.core.property.property"},{"location":"api-documentation/craftr.core.property/#on_property_set_value","text":"on_property_set_value(value_type: t.Any, value: t.Any) -> t.Any Called when Property.set() is called with not a real value. Allows to transform the value.","title":"on_property_set_value"},{"location":"api-documentation/craftr.core.property/#property-objects","text":"class Property(Provider[T]) Properties are mutable providers that sit as attributes on objects of the HavingProperties base class. The type hint of a property is passed into it's construct when the annotation is defined on the HavingProperties class level. Properties perform extensive runtime type checking when setting a bare value and after evaluating it. A property can be finalized in which case it's value is calculated and cached. Subsequent calls to get() will return the cached value and attempts to set the property value will result in a RuntimeError .","title":"Property Objects"},{"location":"api-documentation/craftr.core.property/#finalize","text":"| finalize() -> None Finalize the property. If already finalized, nothing happens.","title":"finalize"},{"location":"api-documentation/craftr.core.property/#havingproperties-objects","text":"class HavingProperties() Base for classes that have properties declared as annotations at the class level. Setting property values will automatically wrap them in a Provider if the value is not already one. The constructor will take care of initializing the properties.","title":"HavingProperties Objects"},{"location":"api-documentation/craftr.core.property/#collect_properties","text":"collect_properties(provider: t.Union[HavingProperties, Provider]) -> t.List[Property] Collects all Property objects that are encountered when visiting the specified provider or all properties of a HavingProperties instance.","title":"collect_properties"},{"location":"api-documentation/craftr.core.property/#craftrcorepropertyprovider","text":"","title":"craftr.core.property.provider"},{"location":"api-documentation/craftr.core.property/#novalueerror-objects","text":"class NoValueError(Exception) Raised when a provider has no value.","title":"NoValueError Objects"},{"location":"api-documentation/craftr.core.property/#provider-objects","text":"class Provider(t.Generic[T], metaclass=abc.ABCMeta)","title":"Provider Objects"},{"location":"api-documentation/craftr.core.property/#get","text":"| @abc.abstractmethod | get() -> T Get the value of the propery, or raise a NoValueError .","title":"get"},{"location":"api-documentation/craftr.core.property/#or_else","text":"| or_else(default: U) -> t.Union[T, U] Get the value of the property, or return default .","title":"or_else"},{"location":"api-documentation/craftr.core.property/#or_else_get","text":"| or_else_get(default_supplier: t.Callable[[], U]) -> t.Union[T, U] Get the value of the property, or return the value returned by default_supplier .","title":"or_else_get"},{"location":"api-documentation/craftr.core.property/#or_none","text":"| or_none() -> t.Optional[T] Get the value of the property, or return None.","title":"or_none"},{"location":"api-documentation/craftr.core.settings/","text":"craftr.core.settings Settings Objects class Settings(, metaclass=abc.ABCMeta) Interface similar to a mapping but it provides additional helpers to read values of various types. get_instance | get_instance(type: t.Type[T], key: str, default: str) -> T Locates a class using the string stored under the specified key or via the default string. If the class provides a from_settings() method, that method will be used to create an instance of the class by passing the settings object itself, otherwise the class will be instantiated without arguments. Note: Due to https://github.com/python/mypy/issues/5374, uses of this function may need to be annotated with # type: ignore . create_instance | create_instance(type: t.Type[T], fqn: str, config_key: str = '<notset>') -> T Creates an instance of the specified type from a fully qualified name. If the class implements the IHasFromSettings protocol, the method will be called to create an instance. parse | @staticmethod | parse(lines: t.Iterable[str], on_invalid_line: t.Optional[t.Callable[[int, str], None]] = None) -> 'Settings' Parses a list of key=value lines and returns it as a Settings object. Lines starting with the hashsign ( # ) are skipped. If provided, lines that do not conform to the key=value format are passed to on_invalid_line and are skipped.","title":"craftr.core.settings"},{"location":"api-documentation/craftr.core.settings/#craftrcoresettings","text":"","title":"craftr.core.settings"},{"location":"api-documentation/craftr.core.settings/#settings-objects","text":"class Settings(, metaclass=abc.ABCMeta) Interface similar to a mapping but it provides additional helpers to read values of various types.","title":"Settings Objects"},{"location":"api-documentation/craftr.core.settings/#get_instance","text":"| get_instance(type: t.Type[T], key: str, default: str) -> T Locates a class using the string stored under the specified key or via the default string. If the class provides a from_settings() method, that method will be used to create an instance of the class by passing the settings object itself, otherwise the class will be instantiated without arguments. Note: Due to https://github.com/python/mypy/issues/5374, uses of this function may need to be annotated with # type: ignore .","title":"get_instance"},{"location":"api-documentation/craftr.core.settings/#create_instance","text":"| create_instance(type: t.Type[T], fqn: str, config_key: str = '<notset>') -> T Creates an instance of the specified type from a fully qualified name. If the class implements the IHasFromSettings protocol, the method will be called to create an instance.","title":"create_instance"},{"location":"api-documentation/craftr.core.settings/#parse","text":"| @staticmethod | parse(lines: t.Iterable[str], on_invalid_line: t.Optional[t.Callable[[int, str], None]] = None) -> 'Settings' Parses a list of key=value lines and returns it as a Settings object. Lines starting with the hashsign ( # ) are skipped. If provided, lines that do not conform to the key=value format are passed to on_invalid_line and are skipped.","title":"parse"},{"location":"api-documentation/craftr.core.task/","text":"craftr.core.task craftr.core.task.selector craftr.core.task.selector.default DefaultTaskSelector Objects class DefaultTaskSelector(ITaskSelector) The default task selector employs the following selector syntax: [:][subProject:]+[taskName] If the selector is prefixed with a semi-colon ( : ), the task path must be exact and relative to the current project. The taskName may refer to an individial task's name or a task group. Without the : prefix, the path must only match exactly at the end of the path (e.g. a:b matches both tasks with an absolute path foo:a:b and egg:spam:a:b ). craftr.core.task.selector.api ITaskSelector Objects @t.runtime_checkable class ITaskSelector(t.Protocol, metaclass=abc.ABCMeta) An interface to expand a string into a set of tasks in the context of a project. craftr.core.task.state calculate_task_hash calculate_task_hash(task: 'Task', hash_algo: str = 'sha1') -> str Calculates a hash for the task that represents the state of it's inputs (property values and input file contents). That hash is used to determine if the task is up to date with it's previous execution or if it needs to be executed. Implementation detail: Expects that all important information of a property value is included in it's repr() , and that the repr() is consistent. craftr.core.task.task Task Objects class Task(HavingProperties, Configurable) A task represents a set of sequential actions that are configurable through properties and may have dependencies on other tasks. Using the property system, dependencies between tasks can be computed automatically without having to explicitly list the dependencies. Tasks are rendered into executable BuildNode objects to construct the BuildGraph . dependencies Explicit dependencies of the task. Tasks in this list will always be executed before this task. default Whether the task should be included if no explicit set of tasks is selected for execution. This is True by default for all tasks (but can be overwritten by subclasses). description A short description of the task. group A name for the group that the task belongs to. Task groups are used to select tasks via common identifiers (e.g. run , compile or debug are generic terms that could apply to a variety of tasks). always_outdated A boolean flag that indicates whether the task is always to be considered outdated. finalized | @property | finalized() -> bool True if finalize() was called. init | init() -> None Called from __init__() . Useful to implement by subclasses. finalize | finalize() -> None Called to finalize the task. This is called automatically after the task is configured. Properties are finalized in this call. The subclass gets a chance to set any output properties that are derived other properties. get_dependencies | get_dependencies() -> t.List['Task'] Get all direct dependencies of the task, including those inherited through properties. get_actions | get_actions() -> t.List['Action'] Get the list of actions for this task. This should be called when everything is loaded. is_outdated | is_outdated() -> bool Checks if the task is outdated. completed | completed() -> None Called when the task was executed. depends_on | depends_on(*tasks: t.Union[str, 'Task']) -> None Specify that the task dependends on the specified other tasks. Strings are resolved from the tasks own project.","title":"craftr.core.task"},{"location":"api-documentation/craftr.core.task/#craftrcoretask","text":"","title":"craftr.core.task"},{"location":"api-documentation/craftr.core.task/#craftrcoretaskselector","text":"","title":"craftr.core.task.selector"},{"location":"api-documentation/craftr.core.task/#craftrcoretaskselectordefault","text":"","title":"craftr.core.task.selector.default"},{"location":"api-documentation/craftr.core.task/#defaulttaskselector-objects","text":"class DefaultTaskSelector(ITaskSelector) The default task selector employs the following selector syntax: [:][subProject:]+[taskName] If the selector is prefixed with a semi-colon ( : ), the task path must be exact and relative to the current project. The taskName may refer to an individial task's name or a task group. Without the : prefix, the path must only match exactly at the end of the path (e.g. a:b matches both tasks with an absolute path foo:a:b and egg:spam:a:b ).","title":"DefaultTaskSelector Objects"},{"location":"api-documentation/craftr.core.task/#craftrcoretaskselectorapi","text":"","title":"craftr.core.task.selector.api"},{"location":"api-documentation/craftr.core.task/#itaskselector-objects","text":"@t.runtime_checkable class ITaskSelector(t.Protocol, metaclass=abc.ABCMeta) An interface to expand a string into a set of tasks in the context of a project.","title":"ITaskSelector Objects"},{"location":"api-documentation/craftr.core.task/#craftrcoretaskstate","text":"","title":"craftr.core.task.state"},{"location":"api-documentation/craftr.core.task/#calculate_task_hash","text":"calculate_task_hash(task: 'Task', hash_algo: str = 'sha1') -> str Calculates a hash for the task that represents the state of it's inputs (property values and input file contents). That hash is used to determine if the task is up to date with it's previous execution or if it needs to be executed. Implementation detail: Expects that all important information of a property value is included in it's repr() , and that the repr() is consistent.","title":"calculate_task_hash"},{"location":"api-documentation/craftr.core.task/#craftrcoretasktask","text":"","title":"craftr.core.task.task"},{"location":"api-documentation/craftr.core.task/#task-objects","text":"class Task(HavingProperties, Configurable) A task represents a set of sequential actions that are configurable through properties and may have dependencies on other tasks. Using the property system, dependencies between tasks can be computed automatically without having to explicitly list the dependencies. Tasks are rendered into executable BuildNode objects to construct the BuildGraph .","title":"Task Objects"},{"location":"api-documentation/craftr.core.task/#dependencies","text":"Explicit dependencies of the task. Tasks in this list will always be executed before this task.","title":"dependencies"},{"location":"api-documentation/craftr.core.task/#default","text":"Whether the task should be included if no explicit set of tasks is selected for execution. This is True by default for all tasks (but can be overwritten by subclasses).","title":"default"},{"location":"api-documentation/craftr.core.task/#description","text":"A short description of the task.","title":"description"},{"location":"api-documentation/craftr.core.task/#group","text":"A name for the group that the task belongs to. Task groups are used to select tasks via common identifiers (e.g. run , compile or debug are generic terms that could apply to a variety of tasks).","title":"group"},{"location":"api-documentation/craftr.core.task/#always_outdated","text":"A boolean flag that indicates whether the task is always to be considered outdated.","title":"always_outdated"},{"location":"api-documentation/craftr.core.task/#finalized","text":"| @property | finalized() -> bool True if finalize() was called.","title":"finalized"},{"location":"api-documentation/craftr.core.task/#init","text":"| init() -> None Called from __init__() . Useful to implement by subclasses.","title":"init"},{"location":"api-documentation/craftr.core.task/#finalize","text":"| finalize() -> None Called to finalize the task. This is called automatically after the task is configured. Properties are finalized in this call. The subclass gets a chance to set any output properties that are derived other properties.","title":"finalize"},{"location":"api-documentation/craftr.core.task/#get_dependencies","text":"| get_dependencies() -> t.List['Task'] Get all direct dependencies of the task, including those inherited through properties.","title":"get_dependencies"},{"location":"api-documentation/craftr.core.task/#get_actions","text":"| get_actions() -> t.List['Action'] Get the list of actions for this task. This should be called when everything is loaded.","title":"get_actions"},{"location":"api-documentation/craftr.core.task/#is_outdated","text":"| is_outdated() -> bool Checks if the task is outdated.","title":"is_outdated"},{"location":"api-documentation/craftr.core.task/#completed","text":"| completed() -> None Called when the task was executed.","title":"completed"},{"location":"api-documentation/craftr.core.task/#depends_on","text":"| depends_on(*tasks: t.Union[str, 'Task']) -> None Specify that the task dependends on the specified other tasks. Strings are resolved from the tasks own project.","title":"depends_on"},{"location":"api-documentation/craftr.core.util/","text":"craftr.core.util craftr.core.util.collections craftr.core.util.pyimport craftr.core.util.preconditions craftr.core.util.typing unpack_type_hint unpack_type_hint(hint: t.Any) -> t.Tuple[t.Optional[t.Any], t.List[t.Any]] Unpacks a type hint into it's origin type and parameters. craftr.core.util.caching JsonDirectoryStore Objects class JsonDirectoryStore(NamespaceStore) A namespace store that maps one namespace to a JSON file. JsonFileStore Objects class JsonFileStore(KeyValueStore) A very simple key value store backed by a JSON file. Really doesn't do anything fancy. Writes the JSON on every update. Not supported in a threading or multiprocessing context.","title":"craftr.core.util"},{"location":"api-documentation/craftr.core.util/#craftrcoreutil","text":"","title":"craftr.core.util"},{"location":"api-documentation/craftr.core.util/#craftrcoreutilcollections","text":"","title":"craftr.core.util.collections"},{"location":"api-documentation/craftr.core.util/#craftrcoreutilpyimport","text":"","title":"craftr.core.util.pyimport"},{"location":"api-documentation/craftr.core.util/#craftrcoreutilpreconditions","text":"","title":"craftr.core.util.preconditions"},{"location":"api-documentation/craftr.core.util/#craftrcoreutiltyping","text":"","title":"craftr.core.util.typing"},{"location":"api-documentation/craftr.core.util/#unpack_type_hint","text":"unpack_type_hint(hint: t.Any) -> t.Tuple[t.Optional[t.Any], t.List[t.Any]] Unpacks a type hint into it's origin type and parameters.","title":"unpack_type_hint"},{"location":"api-documentation/craftr.core.util/#craftrcoreutilcaching","text":"","title":"craftr.core.util.caching"},{"location":"api-documentation/craftr.core.util/#jsondirectorystore-objects","text":"class JsonDirectoryStore(NamespaceStore) A namespace store that maps one namespace to a JSON file.","title":"JsonDirectoryStore Objects"},{"location":"api-documentation/craftr.core.util/#jsonfilestore-objects","text":"class JsonFileStore(KeyValueStore) A very simple key value store backed by a JSON file. Really doesn't do anything fancy. Writes the JSON on every update. Not supported in a threading or multiprocessing context.","title":"JsonFileStore Objects"}]}